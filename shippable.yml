get_max_ver_temp: &get_max_ver
  - |
      B1="$(cut -d'.' -f1 <<< $BASE_VER )"
      B2="$(cut -d'.' -f2 <<< $BASE_VER )"
      B3="$(cut -d'.' -f3 <<< $BASE_VER )"
      C1="$(cut -d'.' -f1 <<< $CURR_VER )"
      C2="$(cut -d'.' -f2 <<< $CURR_VER )"
      C3="$(cut -d'.' -f3 <<< $CURR_VER )"

      if [ $B1 -gt $C1 ]; then
        HIGH_VER=$BASE_VER
      else
        if [ $C1 -gt $B1 ]; then
          HIGH_VER=$CURR_VER
        else
          if [ $B2 -gt $C2 ]; then
            HIGH_VER=$BASE_VER
          else
            if [ $C2 -gt $B2 ]; then
              HIGH_VER=$CURR_VER
            else
              if [ $B3 -gt $C3 ]; then
                HIGH_VER=$BASE_VER
              else
                HIGH_VER=$CURR_VER
              fi
            fi
          fi
        fi
      fi

get_img_temp: &get_img
  - |
      export APP_IMG=$(shipctl get_resource_version_key $INPUT_IMG_INFO sourceName)
      export APP_TAG=$(shipctl get_resource_version_key $INPUT_IMG_INFO versionName)

get_cluster_temp: &get_cluster
  - |
      export CLUSTER_NAME=$(shipctl get_resource_version_key $TARGET_CLUSTER_INFO sourceName)
      export CLUSTER_REGION=$(shipctl get_resource_version_key $TARGET_CLUSTER_INFO region)
      gcloud container clusters get-credentials $CLUSTER_NAME --zone $CLUSTER_REGION

deploy_temp: &deploy
  - |
      shipctl replace appDeploy.yml appSvc.yml
      kubectl delete  -f ./appDeploy.yml 2>/dev/null || echo ""
      kubectl delete -f ./appSvc.yml  2>/dev/null || echo ""
      kubectl create -o json -f ./appDeploy.yml >> kube_output.json
      kubectl create -o json -f ./appSvc.yml >> kube_output.json
      cat kube_output.json

resources:
# REPO of kube configs
  - name: multi_env_repo
    type: gitRepo
    integration: "dr_gh"
    versionTemplate:
      sourceName: "devops-recipes/cd_multi_env_gke_kubectl"
      branch: master

# gcloud CLI Config
  - name: multi_env_gcp_cli
    type: cliConfig
    integration: "dr_gcp"
    versionTemplate:
      region: "us-west1-a"

# jFrog Docker CLI Config
  - name: jfrog_docker_cli
    type: cliConfig
    integration: "docker_repo"

# Test Deployed Image Version
  - name: test_pass_img
    type: image
    integration: docker_repo # replace with your integration name
    versionTemplate:
      sourceName: "tbd" # replace with your Hub URL
      versionName: "0.0.0"

# Prod Deployed Image Version
  - name: prod_deployed_img
    type: image
    integration: docker_repo # replace with your integration name
    versionTemplate:
      sourceName: "tbd" # replace with your Hub URL
      versionName: "0.0.0"

jobs:
  - name: test_cd_gke
    type: runSh
    dependencyMode: strict
    steps:
      - IN: node_app_img_jf # defined here https://github.com/devops-recipes/node_app/blob/master/shippable.yml
      - IN: jfrog_docker_cli
        switch: off
      - IN: gcp_gke_cluster
        switch: off
      - IN: multi_env_repo
        switch: off
      - IN: multi_env_gcp_cli
        switch: off
      - TASK:
          name: deploy_app
          runtime:
            options:
              env:
                - INPUT_IMG_INFO: "node_app_img_jf"
                - TARGET_CLUSTER_INFO: "gcp_gke_cluster"
                - NAMESPACE: "test"
                - APP_LABEL: "test-app"
                - APP_CPU: 125m
                - APP_CPU_LIMIT: 250m
                - APP_PORT: 80
                - REPLICAS: 1
          script:
            - pushd $(shipctl get_resource_state "multi_env_repo")/specs
            - BASE_VER=$(shipctl get_resource_version_key node_app_img_jf versionName)
            - CURR_VER=$(shipctl get_resource_version_key test_pass_img versionName)
            - *get_max_ver
            - NEW_VERSION="$(shipctl bump_version $HIGH_VER rc)"
            - echo $NEW_VERSION
            - *get_img
            - *get_cluster
            - *deploy
            - docker pull $APP_IMG:$APP_TAG
            - docker tag $APP_IMG:$APP_TAG $APP_IMG:$NEW_VERSION
            - docker push $APP_IMG:$NEW_VERSION
            - popd
      - OUT: test_pass_img
    on_success:
      script:
        - shipctl put_resource_state_multi "test_pass_img" "versionName=$APP_TAG sourceName=$APP_IMG"
    flags:
      - gke
      - cd
      - multi_env

  - name: prod_cd_gke
    type: runSh
    dependencyMode: strict
    steps:
      - IN: jfrog_docker_cli
        switch: off
      - IN: test_pass_img
        switch: off
      - IN: gcp_gke_cluster
        switch: off
      - IN: multi_env_repo
        switch: off
      - IN: multi_env_gcp_cli
        switch: off
      - TASK:
          name: deploy_app
          runtime:
            options:
              env:
                - INPUT_IMG_INFO: "test_pass_img"
                - TARGET_CLUSTER_INFO: "gcp_gke_cluster"
                - NAMESPACE: "prod"
                - APP_LABEL: "prod-app"
                - APP_CPU: 250m
                - APP_CPU_LIMIT: 500m
                - APP_PORT: 80
                - REPLICAS: 2
          script:
            - pushd $(shipctl get_resource_state "multi_env_repo")/specs
            - BASE_VER=$(shipctl get_resource_version_key test_pass_img versionName)
            - CURR_VER=$(shipctl get_resource_version_key prod_deployed_img versionName)
            - *get_max_ver
            - NEW_VERSION="$(shipctl bump_version $HIGH_VER rc)"
            - echo $NEW_VERSION
            - *get_img
            - *get_cluster
            - *deploy
            - docker pull $APP_IMG:$APP_TAG
            - docker tag $APP_IMG:$APP_TAG $APP_IMG:$NEW_VERSION
            - docker push $APP_IMG:$NEW_VERSION
            - popd
      - OUT: prod_deployed_img
    on_success:
      script:
        - shipctl put_resource_state_multi "prod_deployed_img" "versionName=$APP_TAG sourceName=$APP_IMG"
    flags:
      - gke
      - cd
      - multi_env